import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class MeanMedianMode {
    public static void main(String[] args) {
        double[] array1 = {16, 18, 27, 16, 23, 21, 19};
        double[] array2 = {26, 28, 37, 26, 33, 31, 29};
        double[] array3 = {1.6, 1.8, 2.7, 1.6, 2.3, 2.1, 0.19};
        double[] array4 = {0, 160, 180, 270, 160, 230, 210, 190, 0};
        double[] array5 = {200, 180, 180, 270, 160, 270, 270, 190, 200};
        double[] array6 = {100, 100, 100, 100, 100, 100, 100, 100, 100};

        findMeanMedianMode(array1);
        findMeanMedianMode(array2);
        findMeanMedianMode(array3);
        findMeanMedianMode(array4);
        findMeanMedianMode(array5);
        findMeanMedianMode(array6);
    }

    public static void findMeanMedianMode(double[] array) {
        Arrays.sort(array);

        double mean = findMean(array);
        double median = findMedian(array);
        double mode = findMode(array);

        System.out.println("Array: " + Arrays.toString(array));
        System.out.println("Mean: " + mean);
        System.out.println("Median: " + median);
        System.out.println("Mode: " + mode);
        System.out.println();
    }

    public static double findMean(double[] array) {
        double sum = 0;
        for (double num : array) {
            sum += num;
        }
        return sum / array.length;
    }

    public static double findMedian(double[] array) {
        int n = array.length;
        if (n % 2 == 0) {
            return (array[n / 2 - 1] + array[n / 2]) / 2;
        } else {
            return array[n / 2];
        }
    }

    public static double findMode(double[] array) {
        Map<Double, Integer> frequencyMap = new HashMap<>();
        for (double num : array) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        double mode = array[0];
        int maxFrequency = 0;
        for (Map.Entry<Double, Integer> entry : frequencyMap.entrySet()) {
            if (entry.getValue() > maxFrequency) {
                maxFrequency = entry.getValue();
                mode = entry.getKey();
            }
        }

        return mode;
    }
}
